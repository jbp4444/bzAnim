-- 
-- Copyright 2021, https://github.com/jbp4444
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
-- https://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
-- 


-- include the user-facing library (not the controller)
local bz = require( 'bzAnim.bzLibrary' )


function init( self )
	msg.post( '.', 'acquire_input_focus' )

	-- if you want debugging turned on, you need a slight delay
	-- to allow the controller to register with the user-library
	timer.delay( 0.2, false, function()
		bz.setDebugLevel(3)
		pprint( bz.info() )
	end )

end

function on_input( self, action_id, action )
	if( action_id == hash('text') ) then
		if( action.text == 'a' ) then
			print( 'simple curved animation with message-back to main.script' )
			bz.animate({ obj='alien1', duration=4.0, path={
				--{ 100   100 }
				{ x=100,y=500 },
				{ x=500,y=500 },
				{ x=900,y=500 },
				{ x=900,y=100 },
			}, on_complete=msg.url() })
		elseif( action.text == 'b' ) then
			print( 'simple animation with a delayed start, with message-back to alien.script for alien1' )
			bz.animate({ obj='alien1', duration=2.0, path={
					{ x=500,y=500 },
					{ x=900,y=100 },
			}, delay=1.0, on_complete=true })
		elseif( action.text == 'c' ) then
			print( 'two animations at same time, showing 2 different easing functions side-by-side' )
			bz.animate({ obj='alien1', duration=4.0, path={
				--{ 100   100 }
				{ x=500, y=500 },
				{ x=900, y=100 },
			}, easing='TYPE_LINEAR' })
			bz.animate({ obj='alien2', duration=4.0, path={
				--{ 100   600 }
				{ x=500, y=200 },
				{ x=900, y=600 },
			}, easing='TYPE_INCUBIC' })
		elseif( action.text == 'd' ) then
			print( 'test what happens if the easing function goes > 1.0' )
			bz.animate({ obj='alien1', duration=4.0, path={
				--{ 100   100 }
				{ x=500, y=500 },
				{ x=900, y=100 },
			}, easing='TYPE_OUTBACK' })
		elseif( action.text == 'e' ) then
			print( 'long-duration animation that gets canceled' )
			local idn = bz.animate({ obj='alien2', duration=5.0, path={
				--{ 100   600 }
				{ x=900, y=600 },
			} })
			print( 'anim returned idn=', idn )
			timer.delay( 4.0, false, function()
				print( 'canceling idn=', idn )
				bz.cancel( idn )
			end)
		elseif( action.text == 'f' ) then
			print( 'long-duration animation that gets canceled; with message-back to main.script' )
			local idn = bz.animate({ obj='alien2', duration=5.0, path={
				--{ 100   600 }
				{ x=900, y=600 },
			}, on_complete=msg.url() })
			print( 'anim returned idn=', idn )
			timer.delay( 4.0, false, function()
				print( 'canceling idn=', idn )
				bz.cancel( idn )
			end)
		elseif( action.text == 'g' ) then
			print( 'long-duration animation that gets canceled; with message-back to alien.script for alien2' )
			local idn = bz.animate({ obj='alien2', duration=5.0, path={
				--{ 100   600 }
				{ x=900, y=600 },
			}, on_complete=true })
			print( 'anim returned idn=', idn )
			timer.delay( 4.0, false, function()
				print( 'canceling idn=', idn )
				bz.cancel( idn )
			end)

		elseif( action.text == 'h' ) then
			print( 'path-sequence animation with several segments' )
			local idn = bz.animateSequence({ obj='alien2', segments={
				{ duration=2.0, path={	--{ 100   600 }
					{ x=200, y=300 },
					{ x=300, y=600 }, }, },
				{ duration=2.0, path={
					{ x=400, y=300 },
					{ x=500, y=600 }, }, },
				{ duration=2.0, path={
					{ x=600, y=300 },
					{ x=700, y=600 }, }, },
				{ duration=2.0, path={
					{ x=800, y=300 },
					{ x=900, y=600 }, }, },
				},
			})
			print( 'seq-anim returned idn=', idn )
			timer.delay( 7.0, false, function()
				print( 'canceling seq with idn=', idn )
				bz.cancel( idn )
			end)

		elseif( action.text == 'y' ) then
			-- press 'y' to see the current positions of both objects
			print( 'alien1 position=', go.get_position('alien1') )
			print( 'alien2 position=', go.get_position('alien2') )
		elseif( action.text == 'z' ) then
			-- press 'z' to reset both objects back to their starting points
			go.set_position( vmath.vector3(100,100,0), 'alien1' )
			go.set_position( vmath.vector3(100,600,0), 'alien2' )
		end
	end
end

function on_message( self, message_id, message, sender )
	if( message_id == hash('anim_complete') ) then
		print( 'anim_complete received at', msg.url(), 'from', message.gobj )
		--pprint( message )
	elseif( message_id == hash('anim_canceled') ) then
		print( 'anim_canceled received at', msg.url(), 'from', message.gobj )
		--pprint( message )
	end
end
